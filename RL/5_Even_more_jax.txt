{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Show me your Manuls\n",
        "\n",
        "You didn't have enough jax ? Well this bonus colab is for you: four algorithms to implements to ~~needlessly hurt your body and soul~~ help you master jax."
      ],
      "metadata": {
        "id": "MU-rZPXtHFSl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Setup  { form-width: \"30%\" }\n",
        "! pip install jax\n",
        "! pip install matplotlib\n",
        "! pip install Pillow\n",
        "\n",
        "! wget https://i.pinimg.com/originals/f9/a3/44/f9a344161e7c7bb8cf6746d028acf96a.jpg -O ~/manul.jpg\n",
        "! wget https://i.pinimg.com/originals/8f/78/e2/8f78e22a64771667314778d497131d0d.jpg -O ~/angry_manul.jpg\n",
        "! wget https://s36537.pcdn.co/wp-content/uploads/2017/01/Pallas-cat-03-289932665.jpg.optimal.jpg -O ~/sunny_manul.jpg\n",
        "! wget \"https://drive.google.com/uc?export=download&id=1CZHZsXYxp7byGEuAYorngIvXks3MTVFe\" -O ~/suspicious_manul.jpg\n",
        "! mkdir ~/fifty_shades_of_manuls\n",
        "! wget \"https://drive.google.com/uc?export=download&id=1vepDR_Qf8oS_PAPbuPw8Sfh4IOM4S3vW\" -O ~/fifty_shades_of_manuls/q_yellow_manul.npz"
      ],
      "metadata": {
        "id": "eCtizYuCbZf1",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Toolbox\n",
        "\n",
        "To begin, we provide you the following tools to test your algorithm:\n",
        "- some sample images\n",
        "- a method to load an image into a numpy array\n",
        "- a method to show a numpy array representing an RGB image on screen\n",
        "- a method to show a numpy array representing a grey scale image on screen"
      ],
      "metadata": {
        "id": "XUBZlCbedHNo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Test Images  { form-width: \"30%\" }\n",
        "PATH_IMAGES_TEST = [\"/root/manul.jpg\",\n",
        "                    \"/root/angry_manul.jpg\",\n",
        "                    \"/root/sunny_manul.jpg\",\n",
        "                    \"/root/suspicious_manul.jpg\"]"
      ],
      "metadata": {
        "id": "gHonF-HnW65J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Functions definitions  { form-width: \"30%\" }\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "def load_image_as_np(path_image: str) -> np.ndarray:\n",
        "  return np.asarray(Image.open(path_image))\n",
        "\n",
        "\n",
        "def show_color_image(img: np.ndarray) -> None:\n",
        "  if len(img.shape) != 3 or img.shape[-1] != 3:\n",
        "    raise ValueError(f\"Invalid image shape: should have shape (width, height, 3)\")\n",
        "\n",
        "  if img.dtype == float:\n",
        "    if img.max() > 1.0 or img.min() < 0 :\n",
        "      raise ValueError(\"When working with float image, all values should be in [0,1]\")\n",
        "    img = (255*img).astype(int)\n",
        "\n",
        "  plt.figure()\n",
        "  plt.imshow(img, aspect='auto')\n",
        "  plt.tight_layout()\n",
        "\n",
        "\n",
        "def show_greyscale_image(img: np.ndarray) -> None:\n",
        "  if len(img.shape) != 2:\n",
        "    raise ValueError(f\"Invalid image shape: should have shape (width, height)\")\n",
        "\n",
        "  if img.dtype == float:\n",
        "    if img.max() > 1.0 or img.min() < 0 :\n",
        "      raise ValueError(\"When working with float image, all values should be in [0,1]\")\n",
        "    img = (255*img).astype(int)\n",
        "\n",
        "  img = np.repeat(img[:, :, None], 3, axis=2)\n",
        "  plt.figure()\n",
        "  plt.imshow(img, aspect='auto')\n",
        "  plt.tight_layout()"
      ],
      "metadata": {
        "id": "pbvYKKtwXgR5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Testing on grey scale images  { form-width: \"30%\" }\n",
        "for path_img in PATH_IMAGES_TEST:\n",
        "  img = load_image_as_np(path_img)\n",
        "  img = np.mean(img, axis=2).astype(int)\n",
        "  show_greyscale_image(img)"
      ],
      "metadata": {
        "cellView": "form",
        "id": "Ja-P5Vwc-zJy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Canny\n",
        "\n",
        "[Canny](https://en.wikipedia.org/wiki/Canny_edge_detector) is a very simple algorithm that detect edges in an image. It can be described as follow:\n",
        "- if you have an RGB image, convert it to grey scale to work with only one channel\n",
        "- (Optional) apply a light gaussian blur to the input to remove small noise and compression artefacts. Let's call the resulting image $I$.\n",
        "- Compute the norm of the gradient on the image as follow:\n",
        "\\begin{align}\n",
        "|\\nabla(I)(x,y)| = |I(x, y) - I(x-1, y)| + |I(x, y) - I(x, y-1)|\n",
        "\\end{align}\n",
        "For the purpose of the computation, you will suppose that $I(x, -1)$ and $I(-1, y)$ are equal to 0. Have a look at [jax.pad](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.pad.html) for how to do that efficiently.\n",
        "\n",
        "- Apply two thresholds to the gradient image:\n",
        "  - If $|\\nabla(I)(x,y)| > v_s$ then, the pixel at the coordinates $(x,y)$ is flagged as a strong edge.\n",
        "  - If $ v_s \\geq |\\nabla(I)(x,y)| > v_w $ then, the pixel at the coordinates $(x,y)$ is flagged as a weak edge.\n",
        "  - If $ v_w \\geq |\\nabla(I)(x,y)| $ then, the pixel at the coordinates $(x,y)$ is not an edge candidate.\n",
        "- Keep all strong edges, and keep only the weak edges that are connected to a strong one.\n",
        "\n",
        "Write a Canny in jax and test it with various thresholds. Don't forget to jit your code.\n"
      ],
      "metadata": {
        "id": "yrmnBg7bHMrg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gOfQC6esHDEl"
      },
      "outputs": [],
      "source": [
        "import jax.numpy as jnp\n",
        "\n",
        "def ToGreyScale(rgb_img: jnp.ndarray) -> jnp.array:\n",
        "  \"\"\"Converts an RGB image into a grey scale one.\n",
        "\n",
        "  Args:\n",
        "    rgb_img: an array of shape (width, height, 3)\n",
        "  Returns:\n",
        "    The grey scale version of the input: an array of shape (width, height)\n",
        "  \"\"\"\n",
        "  # Your code here !\n",
        "  return grey_img\n",
        "\n",
        "def Canny(img: jnp.ndarray,\n",
        "          v_strong: float,\n",
        "          v_weak: float,\n",
        "          ) -> jnp.ndarray:\n",
        "  \"\"\"Canny edge detection algorithm.\n",
        "\n",
        "  Args:\n",
        "    img: jgrey scale image. An array of shape (width, height)\n",
        "    v_strong: strong edge threshold.\n",
        "    v_weak: weak edge threshold.\n",
        "  Returns:\n",
        "    An integer array E of shape (width, height), where E(x,y) = 1 if there is an\n",
        "    edge at the coordinates (x,y) and 0 elsewhere.\n",
        "  \"\"\"\n",
        "  # Your code here !\n",
        "  ...\n",
        "  return edges_img"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Unit test { form-width: \"30%\" }\n",
        "\n",
        "input_grey_img = jnp.array([\n",
        "  [0., 0., 255., 255., 125., 125., 0.],\n",
        "  [0., 0., 255., 255., 125., 125., 0.],\n",
        "  [0., 0., 125., 125., 125., 125., 0.],\n",
        "  [0., 0.,   0.,   0.,   0.,   0., 0.],\n",
        "])\n",
        "\n",
        "out_0 = jnp.array([\n",
        "  [0, 0, 1, 0, 0, 0, 0],\n",
        "  [0, 0, 1, 0, 0, 0, 0],\n",
        "  [0, 0, 1, 0, 0, 0, 0],\n",
        "  [0, 0, 0, 0, 0, 0, 0],\n",
        "])\n",
        "\n",
        "res_0 = Canny(out_0, v_strong=200, v_weak=190)\n",
        "is_valid = jnp.all(out_0 == res_0)\n",
        "if not is_valid:\n",
        "  raise ValueError(\"Incorrect edges for v_strong=200, v_weak=190\")\n",
        "\n",
        "out_1 = jnp.array([\n",
        "  [0, 0, 1, 0, 0, 0, 0],\n",
        "  [0, 0, 1, 0, 0, 0, 0],\n",
        "  [0, 0, 1, 1, 0, 0, 0],\n",
        "  [0, 0, 0, 0, 0, 0, 0],\n",
        "])\n",
        "\n",
        "res_1 = Canny(out_0, v_strong=200, v_weak=129)\n",
        "is_valid = jnp.all(out_1 == res_1)\n",
        "if not is_valid:\n",
        "  raise ValueError(\"Incorrect edges for v_strong=200, v_weak=129\")\n",
        "\n",
        "out_2 = jnp.array([\n",
        "  [0, 0, 1, 0, 1, 0, 0],\n",
        "  [0, 0, 1, 0, 1, 0, 0],\n",
        "  [0, 0, 1, 1, 0, 0, 0],\n",
        "  [0, 0, 1, 1, 0, 0, 0],\n",
        "])\n",
        "\n",
        "res_1 = Canny(out_0, v_strong=129, v_weak=120)\n",
        "is_valid = jnp.all(out_1 == res_1)\n",
        "if not is_valid:\n",
        "  raise ValueError(\"Incorrect edges for v_strong=129, v_weak=120\")\n",
        "\n",
        "print(\"Correct !\")"
      ],
      "metadata": {
        "cellView": "form",
        "id": "tToDbxzYeqet"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Do not forget to test your algorithm on the images available in `PATH_IMAGES_TEST`!"
      ],
      "metadata": {
        "id": "6zDUeDSM0PHF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## K-Means\n",
        "\n",
        "[K-Means](https://en.wikipedia.org/wiki/K-means_clustering) is the classical clustering algorithm. It can be described as follow:\n",
        "```\n",
        "Given a set of points X = (x_0, ..., x_n) and a number of cluster K.\n",
        "Randomly pick K starting cluster (c_0, .., c_(K-1)) within X.\n",
        "\n",
        "For step in [0; max_steps [:\n",
        "  - Assign each point x_i to its nearest cluster c_(x_i)) according to the euclidian distance. Let's call S_i the set of all the points assigned to a given cluster c_i.\n",
        "  - Replace c_i by the barycenter of all the points that were assigned to it. ie c_i := 1 / |S_i| * sum( x | x in S_i).\n",
        "  - If, for all i || c_i(step -1) - c_i(step) || < threshold, then end the loop.\n",
        "```\n",
        "\n",
        "First, implement K-Means in numpy in an **efficient fashion**: if you master your numpy you shouldn't need more than very few lines of code for K-Means.\n",
        "\n",
        "Then, do the same in jax and jit your function. For the jax version, you may want to use [jax.nn.one_hot](https://jax.readthedocs.io/en/latest/_autosummary/jax.nn.one_hot.html). Compare the performances between the two.\n"
      ],
      "metadata": {
        "id": "-svc65iuHgfk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import jax\n",
        "import jax.numpy as jnp\n",
        "\n",
        "def numpy_kmeans(data: np.ndarray,\n",
        "                 K: int,\n",
        "                 max_n_steps: int,\n",
        "                 threshold: float,\n",
        "                 ) -> np.ndarray:\n",
        "  \"\"\"K-Means algorithm.\n",
        "\n",
        "  Args:\n",
        "    data: input points to clusterize. Should be of shape (N, dim) where N is the\n",
        "      number of point and dim is the dimension of the input space.\n",
        "    K: number of cluster to compute.\n",
        "    max_n_steps: maximal number of iterations of the K-means algorithm\n",
        "    threshold: stop the algorithm if between two iterations the maximal distance\n",
        "      the maximal distance between a cluster and its next assigment is lower\n",
        "      than the given threshold.\n",
        "  Returns:\n",
        "    An array C of shape (K, dim) where C[k] is the kth cluster found.\n",
        "  \"\"\"\n",
        "  ...\n",
        "\n",
        "def jax_kmeans(data: jnp.ndarray,\n",
        "               K: int,\n",
        "               max_n_steps: int,\n",
        "               threshold: float,\n",
        "               ) -> jnp.ndarray:\n",
        "  \"\"\"K-Means algorithm.\n",
        "\n",
        "  Args:\n",
        "    data: input points to clusterize. Should be of shape (N, dim) where N is the\n",
        "      number of point and dim is the dimension of the input space.\n",
        "    K: number of cluster to compute.\n",
        "    max_n_steps: maximal number of iterations of the K-means algorithm\n",
        "    threshold: stop the algorithm if between two iterations the maximal distance\n",
        "      the maximal distance between a cluster and its next assigment is lower\n",
        "      than the given threshold.\n",
        "  Returns:\n",
        "    An array C of shape (K, dim) where C[k] is the kth cluster found.\n",
        "  \"\"\"\n",
        "  ..."
      ],
      "metadata": {
        "id": "A4QQW9VZGZ2p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Unit test { form-width: \"30%\" }\n",
        "test_data = np.array([\n",
        "\t\t[10., 1., 0.],\n",
        "\t\t[9., 1., 0.],\n",
        "\t\t[8., 1., 0.],\n",
        "\t\t[7., 1., 0.],\n",
        "\t\t[6., 1., 0.],\n",
        "\n",
        "\t\t[-10., 3., 0.],\n",
        "\t\t[-9., 3., 0.],\n",
        "\t\t[-8., 3., 0.],\n",
        "\t\t[-7., 3., 0.],\n",
        "\t\t[-6., 3., 0.],\n",
        "\t])\n",
        "\n",
        "expected_output = np.array([[ 8. , 1., 0.], [-8. , 3., 0.]])\n",
        "print(\"Testing the numpy version\")\n",
        "out = numpy_kmeans(test_data, K=2, max_n_steps=1000, threshold=1e-6)\n",
        "if np.any(np.abs(out-expected_output) > 1e-6):\n",
        "  raise ValueError(\"Invalid numpy implementation.\")\n",
        "print(\"Probably correct.\")\n",
        "\n",
        "print(\"Testing the jax version\")\n",
        "out = jax_kmeans(jnp.array(test_data), K=2, max_n_steps=1000, threshold=1e-6)\n",
        "out = np.array(out)\n",
        "if np.any(np.abs(out-expected_output) > 1e-6):\n",
        "  raise ValueError(\"Invalid numpy implementation.\")\n",
        "print(\"Probably correct.\")"
      ],
      "metadata": {
        "id": "DANySCZBg4RN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the KPI, you can use the following template to compare the performances of jax and numpy."
      ],
      "metadata": {
        "id": "5NOBxzz5DZYU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "jitted_kmean = jax.jit(jax_kmeans)\n",
        "\n",
        "N_REPS = 100\n",
        "DIM_SPACE = 20\n",
        "N_POINTS = 10_000\n",
        "N_CLUSTER = 30\n",
        "MAX_STEPS = 100\n",
        "THRESHOLD = 1e-6\n",
        "\n",
        "start_time = time.time()\n",
        "for _ in range(N_REPS):\n",
        "  data = np.random.rand(N_POINTS, DIM_SPACE)\n",
        "  clusters = numpy_kmeans(data= data,\n",
        "                          K=N_CLUSTER,\n",
        "                          max_n_steps=MAX_STEPS,\n",
        "                          threshold=THRESHOLD,\n",
        "                          )\n",
        "total_time = time.time() - start_time'\n",
        "print(f\"Running time with numpy: {total_time} seconds\")\n",
        "\n",
        "start_time = time.time()\n",
        "for _ in range(N_REPS):\n",
        "  data = np.random.rand(N_POINTS, DIM_SPACE)\n",
        "  clusters = jitted_kmean(data= jnp.asarray(data),\n",
        "                          K=N_CLUSTER,\n",
        "                          max_n_steps=MAX_STEPS,\n",
        "                          threshold=THRESHOLD,\n",
        "                          )\n",
        "total_time = time.time() - start_time\n",
        "print(f\"Running time with jax: {total_time} seconds\")"
      ],
      "metadata": {
        "id": "wzlb1YUNH-hL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Paint by number\n",
        "\n",
        "You have probably seen a [paint by number](https://en.wikipedia.org/wiki/Paint_by_number) at some point in your life. The concept is rather simple: in each cell in printed a number, a each number matches with a unique color. When you paint each cell with its corresponding color you get a nice painting. Well, let's do the same in jax.\n",
        "\n",
        "Your input 'paint' will be an integer array of shape `(width, height)`, each element of the array being an integer in `[0; N_color]` where `N_color` is the number of colors. On top of that, you are provided with a color \"dictionnary\" `C_dict` in the form of an array of shape `(N_color, 3)` where `C_dict[i]` is the RGB code of the ith color.\n",
        "\n",
        "For example, have a look at the test data below."
      ],
      "metadata": {
        "id": "8lST5W9UrOjc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "in_array = np.array([\n",
        "    [0, 0, 0, 0, 0, 0],\n",
        "    [0, 1, 1, 1, 1, 0],\n",
        "    [0, 1, 0, 0, 1, 0],\n",
        "    [0, 1, 0, 0, 1, 0],\n",
        "    [0, 1, 0, 0, 1, 0],\n",
        "    [0, 1, 1, 1, 1, 0],\n",
        "    [0, 0, 0, 0, 0, 0],\n",
        "  ]\n",
        ")\n",
        "\n",
        "C_dict = np.array([\n",
        "    [255, 0, 0],\n",
        "    [255, 255, 0],\n",
        "])"
      ],
      "metadata": {
        "id": "m8AVcomImJX1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "If you use the algorithm on thisinput, you should get a yellow square on a red background.\n",
        "\n",
        "Code a `paint_by_number` function, jit it, and test it on the following test arrays. Use the function `load_painting` to load them."
      ],
      "metadata": {
        "id": "EkROJ4y-muZo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from typing import Tuple\n",
        "import numpy as np\n",
        "import jax.numpy as jnp\n",
        "import jax\n",
        "\n",
        "PATH_TEST_ARRAY = '/root/fifty_shades_of_manuls/q_yellow_manul.npz'\n",
        "\n",
        "def load_painting(path_npz: str) -> Tuple[np.ndarray, np.ndarray]:\n",
        "  with np.load(path_npz) as data:\n",
        "    in_array = data['in_array']\n",
        "    C_dict = data['color_dict']\n",
        "\n",
        "  return in_array, C_dict\n",
        "\n",
        "def paint_by_number(in_array: jnp.ndarray,\n",
        "                    C_dict: jnp.ndarray,\n",
        "                    ) -> jnp.ndarray:\n",
        "  \"\"\"Paint by number function.\n",
        "\n",
        "  Args:\n",
        "    in_array: input painting. An integer array of shape (width, height) with\n",
        "      values in the range [0, N_colors]\n",
        "    C_dict: the color dictionnary. An integer array of shape (N_colors, 3) where\n",
        "      C_dict[i] is the RGB code of the ith color.\n",
        "  Returns:\n",
        "    An RGB array of shape (width, height, 3)\n",
        "  \"\"\"\n",
        "  ..."
      ],
      "metadata": {
        "id": "rAz4zmCCnRns"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Unit test { form-width: \"30%\" }\n",
        "in_array = np.array([\n",
        "    [0, 0, 0, 0, 0, 0],\n",
        "    [0, 1, 1, 1, 1, 0],\n",
        "    [0, 1, 0, 0, 1, 0],\n",
        "    [0, 1, 0, 0, 1, 0],\n",
        "    [0, 1, 0, 0, 1, 0],\n",
        "    [0, 1, 1, 1, 1, 0],\n",
        "    [0, 0, 0, 0, 0, 0],\n",
        "  ]\n",
        ")\n",
        "\n",
        "C_dict = np.array([\n",
        "    [255, 0, 0],\n",
        "    [255, 255, 0],\n",
        "])\n",
        "\n",
        "expected_R = np.full(in_array.shape, 255)\n",
        "\n",
        "expected_G = np.array([\n",
        "    [0, 0, 0, 0, 0, 0],\n",
        "    [0, 255, 255, 255, 255, 0],\n",
        "    [0, 255, 0, 0, 255, 0],\n",
        "    [0, 255, 0, 0, 255, 0],\n",
        "    [0, 255, 0, 0, 255, 0],\n",
        "    [0, 255, 255, 255, 255, 0],\n",
        "    [0, 0, 0, 0, 0, 0],\n",
        "  ]\n",
        ")\n",
        "\n",
        "expected_B = np.zeros(in_array.shape, dtype=expected_R.dtype)\n",
        "\n",
        "expected_out = np.stack([expected_R, expected_G, expected_B], axis=0)\n",
        "out = np.array(paint_by_number(jnp.array(in_array), jnp.array(C_dict)))\n",
        "\n",
        "if np.any(expected_out != out):\n",
        "  print(\"Invalid output.\")\n",
        "\n",
        "print(\"Correct.\")"
      ],
      "metadata": {
        "id": "2LCb_sBWNrZs",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Color quantization\n",
        "\n",
        "[Color quantization](https://en.wikipedia.org/wiki/Color_quantization) is the process of reducing the number of colors in an image while being as close as possible to the original. Using the K-means and paint by number functions you defined earlier, write a function `color_quantization` that takes as input an RGB image `img` and a target number of colors `n_colors` and returns and image `quantized_img` representing `img` with only `n_colors`.\n",
        "\n",
        "To reduce the number of points used by the K-Means algorithm, don't hesitate to use [jax.image.resize](https://jax.readthedocs.io/en/latest/_autosummary/jax.image.resize.html). Test your function with the images of `PATH_IMAGES_TEST`.\n",
        "\n",
        "\n",
        "**Question**: is K-Mean a good clustering method for color quantization ?"
      ],
      "metadata": {
        "id": "CdbTRPQDJR3U"
      }
    }
  ]
}